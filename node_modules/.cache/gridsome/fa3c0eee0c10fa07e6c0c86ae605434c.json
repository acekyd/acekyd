{"remainingRequest":"/Users/adewaleabati/Documents/code/acekyd/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/directives/link.js","dependencies":[{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/directives/link.js","mtime":499162500000},{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.timers\";\nimport fetch from '../fetch';\nimport router from '../router';\nimport caniuse from '../utils/caniuse';\nimport { stripPathPrefix } from '../utils/helpers';\nimport { createObserver } from '../utils/intersectionObserver';\nvar isPreloaded = {};\nvar observer = caniuse.IntersectionObserver ? createObserver(intersectionHandler) : null;\nexport default {\n  inserted: function inserted(el) {\n    observer && observer.observe(el);\n  },\n  unbind: function unbind(el) {\n    observer && observer.unobserve(el);\n  }\n};\n\nfunction intersectionHandler(_ref) {\n  var intersectionRatio = _ref.intersectionRatio,\n      target = _ref.target;\n\n  if (process.isClient) {\n    if (intersectionRatio > 0) {\n      observer.unobserve(target);\n\n      if (document.location.hostname === target.hostname) {\n        if (isPreloaded[target.pathname]) return;else isPreloaded[target.pathname] = true;\n        var path = stripPathPrefix(target.pathname);\n\n        var _router$resolve = router.resolve({\n          path: path\n        }),\n            route = _router$resolve.route;\n\n        setTimeout(function () {\n          return fetch(route, {\n            shouldPrefetch: true\n          });\n        }, 250);\n      }\n    }\n  }\n}",{"version":3,"sources":["/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/directives/link.js"],"names":["fetch","router","caniuse","stripPathPrefix","createObserver","isPreloaded","observer","IntersectionObserver","intersectionHandler","inserted","el","observe","unbind","unobserve","intersectionRatio","target","process","isClient","document","location","hostname","pathname","path","resolve","route","setTimeout","shouldPrefetch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,IAAMC,WAAW,GAAG,EAApB;AAEA,IAAMC,QAAQ,GAAGJ,OAAO,CAACK,oBAAR,GACbH,cAAc,CAACI,mBAAD,CADD,GAEb,IAFJ;AAIA,eAAe;AACbC,EAAAA,QADa,oBACHC,EADG,EACC;AACZJ,IAAAA,QAAQ,IAAIA,QAAQ,CAACK,OAAT,CAAiBD,EAAjB,CAAZ;AACD,GAHY;AAIbE,EAAAA,MAJa,kBAILF,EAJK,EAID;AACVJ,IAAAA,QAAQ,IAAIA,QAAQ,CAACO,SAAT,CAAmBH,EAAnB,CAAZ;AACD;AANY,CAAf;;AASA,SAASF,mBAAT,OAA6D;AAAA,MAA7BM,iBAA6B,QAA7BA,iBAA6B;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AAC3D,MAAIC,OAAO,CAACC,QAAZ,EAAsB;AACpB,QAAIH,iBAAiB,GAAG,CAAxB,EAA2B;AACzBR,MAAAA,QAAQ,CAACO,SAAT,CAAmBE,MAAnB;;AAEA,UAAIG,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,KAA+BL,MAAM,CAACK,QAA1C,EAAoD;AAClD,YAAIf,WAAW,CAACU,MAAM,CAACM,QAAR,CAAf,EAAkC,OAAlC,KACKhB,WAAW,CAACU,MAAM,CAACM,QAAR,CAAX,GAA+B,IAA/B;AAEL,YAAMC,IAAI,GAAGnB,eAAe,CAACY,MAAM,CAACM,QAAR,CAA5B;;AAJkD,8BAKhCpB,MAAM,CAACsB,OAAP,CAAe;AAAED,UAAAA,IAAI,EAAJA;AAAF,SAAf,CALgC;AAAA,YAK1CE,KAL0C,mBAK1CA,KAL0C;;AAOlDC,QAAAA,UAAU,CAAC;AAAA,iBAAMzB,KAAK,CAACwB,KAAD,EAAQ;AAAEE,YAAAA,cAAc,EAAE;AAAlB,WAAR,CAAX;AAAA,SAAD,EAA+C,GAA/C,CAAV;AACD;AACF;AACF;AACF","sourcesContent":["import fetch from '../fetch'\nimport router from '../router'\nimport caniuse from '../utils/caniuse'\nimport { stripPathPrefix } from '../utils/helpers'\nimport { createObserver } from '../utils/intersectionObserver'\n\nconst isPreloaded = {}\n\nconst observer = caniuse.IntersectionObserver\n  ? createObserver(intersectionHandler)\n  : null\n\nexport default {\n  inserted (el) {\n    observer && observer.observe(el)\n  },\n  unbind (el) {\n    observer && observer.unobserve(el)\n  }\n}\n\nfunction intersectionHandler ({ intersectionRatio, target }) {\n  if (process.isClient) {\n    if (intersectionRatio > 0) {\n      observer.unobserve(target)\n\n      if (document.location.hostname === target.hostname) {\n        if (isPreloaded[target.pathname]) return\n        else isPreloaded[target.pathname] = true\n\n        const path = stripPathPrefix(target.pathname)\n        const { route } = router.resolve({ path })\n\n        setTimeout(() => fetch(route, { shouldPrefetch: true }), 250)\n      }\n    }\n  }\n}\n"]}]}