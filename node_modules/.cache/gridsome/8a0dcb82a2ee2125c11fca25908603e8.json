{"remainingRequest":"/Users/adewaleabati/Documents/code/acekyd/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/utils/helpers.js","dependencies":[{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/utils/helpers.js","mtime":499162500000},{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/adewaleabati/Documents/code/acekyd/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.regexp.constructor\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.starts-with\";\nimport _slicedToArray from \"/Users/adewaleabati/Documents/code/acekyd/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport config from '~/.temp/config';\nvar re = new RegExp(\"^\".concat(config.pathPrefix, \"/?\"));\nexport function unslash(string) {\n  return string.replace(/^\\/+|\\/+$/g, '');\n}\nexport function unslashStart(string) {\n  return string.replace(/^\\/+/g, '');\n}\nexport function unslashEnd(string) {\n  return string.replace(/\\/+$/g, '');\n}\nexport function url() {\n  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  return normalizePath(\"\".concat(config.pathPrefix, \"/\").concat(string));\n}\nexport function stripPageParam(route) {\n  var path = route.path,\n      page = route.params.page;\n  var normalizedPath = unslashEnd(path);\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath) ? normalizedPath.split('/').slice(0, -1).join('/') || '/' : normalizedPath || '/';\n}\nexport function stripPathPrefix(string) {\n  return '/' + unslashStart(string.replace(re, ''));\n}\nexport function parsePath(path) {\n  var pathname = path || '/';\n  var query = '';\n  var hash = '';\n\n  var _path$split = path.split('#');\n\n  var _path$split2 = _slicedToArray(_path$split, 2);\n\n  pathname = _path$split2[0];\n  var _path$split2$ = _path$split2[1];\n  hash = _path$split2$ === void 0 ? '' : _path$split2$;\n\n  var _pathname$split = pathname.split('?');\n\n  var _pathname$split2 = _slicedToArray(_pathname$split, 2);\n\n  pathname = _pathname$split2[0];\n  var _pathname$split2$ = _pathname$split2[1];\n  query = _pathname$split2$ === void 0 ? '' : _pathname$split2$;\n  return {\n    pathname: pathname,\n    query: query ? \"?\".concat(query) : '',\n    hash: hash ? \"#\".concat(hash) : ''\n  };\n}\nexport function normalizePath() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  return \"/\".concat(path).replace(/\\/+/g, '/');\n}\nexport var isMailtoLink = function isMailtoLink(string) {\n  return String(string).startsWith('mailto:');\n};\nexport var isTelLink = function isTelLink(string) {\n  return String(string).startsWith('tel:');\n};",{"version":3,"sources":["/Users/adewaleabati/Documents/code/acekyd/node_modules/gridsome/app/utils/helpers.js"],"names":["config","re","RegExp","pathPrefix","unslash","string","replace","unslashStart","unslashEnd","url","normalizePath","stripPageParam","route","path","page","params","normalizedPath","test","split","slice","join","stripPathPrefix","parsePath","pathname","query","hash","isMailtoLink","String","startsWith","isTelLink"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AAEA,IAAMC,EAAE,GAAG,IAAIC,MAAJ,YAAeF,MAAM,CAACG,UAAtB,QAAX;AAEA,OAAO,SAASC,OAAT,CAAkBC,MAAlB,EAA0B;AAC/B,SAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACD;AAED,OAAO,SAASC,YAAT,CAAuBF,MAAvB,EAA+B;AACpC,SAAOA,MAAM,CAACC,OAAP,CAAe,OAAf,EAAwB,EAAxB,CAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAqBH,MAArB,EAA6B;AAClC,SAAOA,MAAM,CAACC,OAAP,CAAe,OAAf,EAAwB,EAAxB,CAAP;AACD;AAED,OAAO,SAASG,GAAT,GAA4B;AAAA,MAAdJ,MAAc,uEAAL,GAAK;AACjC,SAAOK,aAAa,WAAIV,MAAM,CAACG,UAAX,cAAyBE,MAAzB,EAApB;AACD;AAED,OAAO,SAASM,cAAT,CAAyBC,KAAzB,EAAgC;AAAA,MAC7BC,IAD6B,GACHD,KADG,CAC7BC,IAD6B;AAAA,MACbC,IADa,GACHF,KADG,CACvBG,MADuB,CACbD,IADa;AAErC,MAAME,cAAc,GAAGR,UAAU,CAACK,IAAD,CAAjC;AAEA,SAAOC,IAAI,IAAI,QAAQG,IAAR,CAAaH,IAAb,CAAR,IAA8B,SAASG,IAAT,CAAcD,cAAd,CAA9B,GACHA,cAAc,CAACE,KAAf,CAAqB,GAArB,EAA0BC,KAA1B,CAAgC,CAAhC,EAAmC,CAAC,CAApC,EAAuCC,IAAvC,CAA4C,GAA5C,KAAoD,GADjD,GAEHJ,cAAc,IAAI,GAFtB;AAGD;AAED,OAAO,SAASK,eAAT,CAA0BhB,MAA1B,EAAkC;AACvC,SAAO,MAAME,YAAY,CAACF,MAAM,CAACC,OAAP,CAAeL,EAAf,EAAmB,EAAnB,CAAD,CAAzB;AACD;AAED,OAAO,SAASqB,SAAT,CAAoBT,IAApB,EAA0B;AAC/B,MAAIU,QAAQ,GAAGV,IAAI,IAAI,GAAvB;AACA,MAAIW,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;;AAH+B,oBAKNZ,IAAI,CAACK,KAAL,CAAW,GAAX,CALM;;AAAA;;AAK7BK,EAAAA,QAL6B;AAAA;AAKnBE,EAAAA,IALmB,8BAKZ,EALY;;AAAA,wBAMLF,QAAQ,CAACL,KAAT,CAAe,GAAf,CANK;;AAAA;;AAM7BK,EAAAA,QAN6B;AAAA;AAMnBC,EAAAA,KANmB,kCAMX,EANW;AAQ/B,SAAO;AACLD,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,KAAK,EAAEA,KAAK,cAAOA,KAAP,IAAiB,EAFxB;AAGLC,IAAAA,IAAI,EAAEA,IAAI,cAAOA,IAAP,IAAgB;AAHrB,GAAP;AAKD;AAED,OAAO,SAASf,aAAT,GAAoC;AAAA,MAAZG,IAAY,uEAAL,GAAK;AACzC,SAAO,WAAIA,IAAJ,EAAWP,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,CAAP;AACD;AAED,OAAO,IAAMoB,YAAY,GAAG,SAAfA,YAAe,CAAArB,MAAM;AAAA,SAAIsB,MAAM,CAACtB,MAAD,CAAN,CAAeuB,UAAf,CAA0B,SAA1B,CAAJ;AAAA,CAA3B;AAEP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAxB,MAAM;AAAA,SAAIsB,MAAM,CAACtB,MAAD,CAAN,CAAeuB,UAAf,CAA0B,MAA1B,CAAJ;AAAA,CAAxB","sourcesContent":["import config from '~/.temp/config'\n\nconst re = new RegExp(`^${config.pathPrefix}/?`)\n\nexport function unslash (string) {\n  return string.replace(/^\\/+|\\/+$/g, '')\n}\n\nexport function unslashStart (string) {\n  return string.replace(/^\\/+/g, '')\n}\n\nexport function unslashEnd (string) {\n  return string.replace(/\\/+$/g, '')\n}\n\nexport function url (string = '/') {\n  return normalizePath(`${config.pathPrefix}/${string}`)\n}\n\nexport function stripPageParam (route) {\n  const { path, params: { page }} = route\n  const normalizedPath = unslashEnd(path)\n\n  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath)\n    ? normalizedPath.split('/').slice(0, -1).join('/') || '/'\n    : normalizedPath || '/'\n}\n\nexport function stripPathPrefix (string) {\n  return '/' + unslashStart(string.replace(re, ''))\n}\n\nexport function parsePath (path) {\n  let pathname = path || '/'\n  let query = ''\n  let hash = ''\n\n  ;[pathname, hash = ''] = path.split('#')\n  ;[pathname, query = ''] = pathname.split('?')\n\n  return {\n    pathname,\n    query: query ? `?${query}` : '',\n    hash: hash ? `#${hash}` : ''\n  }\n}\n\nexport function normalizePath (path = '/') {\n  return `/${path}`.replace(/\\/+/g, '/')\n}\n\nexport const isMailtoLink = string => String(string).startsWith('mailto:')\n\nexport const isTelLink = string => String(string).startsWith('tel:')"]}]}